type Query {
  deliveryMans(
    first: NonNegativeInt
    last: NonNegativeInt
    after: String
    before: String
    filter: DeliveryMansFilter
  ): DeliveryManConnection
  deliveryMan(id: ID!): DeliveryMan!
}

type DeliveryManConnection {
  pageInfo: PageInfo!
  edges: [DeliveryManEdge!]!
  totalCount: NonNegativeInt!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  endCursor: String
  startCursor: String
}

type DeliveryManEdge {
  cursor: String!
  node: DeliveryMan
}

input DeliveryMansFilter {
  query: String
}
